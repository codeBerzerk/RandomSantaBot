import json
import random
import asyncio
import nest_asyncio  # –î–æ–∑–≤–æ–ª—è—î –≤–∫–ª–∞–¥–∞—Ç–∏ event loop
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
import logging

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è nest_asyncio
nest_asyncio.apply()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É JSON
DATA_FILE = "participants.json"

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –Ω–æ–≤–∏–º–∏ —É—á–∞—Å–Ω–∏–∫–∞–º–∏ —Ç–∞ –∫–æ–ª—å–æ—Ä–∞–º–∏
initial_data = {
    "participants": [
        {"name": "–í—ñ–∫–∞",   "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–ö–æ–ª—è",   "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–î–∞–Ω–∞",   "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–ö–æ—Å—Ç—è",  "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–õ—é–¥–∞",   "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–Ø—Ä—ñ–∫",   "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–û–ª–µ–Ω–∞",  "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–î–∞–Ω—è",   "approved": False, "user_id": None, "assigned_to": None, "color": None},

        # –ù–æ–≤—ñ —É—á–∞—Å–Ω–∏–∫–∏
        {"name": "–°–ª–∞–≤—ñ–∫", "approved": False, "user_id": None, "assigned_to": None, "color": None},
        {"name": "–ù–∞—Å—Ç—è",  "approved": False, "user_id": None, "assigned_to": None, "color": None}
    ],
    "colors": [
        "–ß–æ—Ä–Ω–∏–π üñ§", "–ß–µ—Ä–≤–æ–Ω–∏–π ‚ù§Ô∏è", "–°–∏–Ω—ñ–π üíô", "–†–æ–∂–µ–≤–∏–π üíñ",
        "–ñ–æ–≤—Ç–∏–π üíõ", "–ó–µ–ª–µ–Ω–∏–π üíö", "–ë—ñ–ª–∏–π ü§ç", "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π üíú",

        # –ù–æ–≤—ñ –∫–æ–ª—å–æ—Ä–∏
        "–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π üß°", "–ö–æ—Ä–∏—á–Ω–µ–≤–∏–π ü§é"
    ]
}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è JSON
try:
    with open(DATA_FILE, "r", encoding="utf-8") as file:
        data = json.load(file)
except FileNotFoundError:
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(initial_data, file, ensure_ascii=False, indent=4)
    data = initial_data

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è JSON
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)
    logger.info("–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected_participant = next((p for p in data["participants"] if p["user_id"] == user_id), None)

    if selected_participant:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –æ–±—Ä–∞–≤ —ñ–º'—è
        assigned_to = selected_participant["assigned_to"]
        color = selected_participant["color"]
        if assigned_to and color:
            await update.message.reply_text(
                f"üéâ –í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ —ñ–º'—è: {selected_participant['name']}.\n"
                f"–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –¥–∞—Ä—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è {assigned_to} –∑ –∫–æ–ª—å–æ—Ä–æ–º {color} üéÅ"
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è.")
        else:
            await update.message.reply_text(
                f"üéâ –í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ —ñ–º'—è: {selected_participant['name']}.\n"
                f"–í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ."
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ–±—Ä–∞–≤ —ñ–º'—è {selected_participant['name']} –∞–ª–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ.")
    else:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–º–µ–Ω (–≤–∫–ª—é—á–∞—é—á–∏ —Å–≤–æ—î —ñ–º'—è, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –æ–±–∏—Ä–∞–≤)
        available_names = [
            p["name"] for p in data["participants"]
            if not p["approved"] or p.get("user_id") == user_id
        ]
        if not available_names:
            await update.message.reply_text("üò¢ –ù–∞ –∂–∞–ª—å, –≤—Å—ñ —ñ–º–µ–Ω–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω—ñ.")
            logger.info("–í—Å—ñ —ñ–º–µ–Ω–∞ –≤–∂–µ –≤–∏–±—Ä–∞–Ω—ñ.")
            return
        keyboard = [[name] for name in available_names]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text(
            "üéÖ –ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ —Å–≤–æ—î —ñ–º'—è –∑—ñ —Å–ø–∏—Å–∫—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –¢–∞—î–º–Ω–æ–≥–æ –°–∞–Ω—Ç–∏ üéÅ:",
            reply_markup=reply_markup
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–º–µ–Ω.")

# –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∞
async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.message.text.strip()
    participant = next((p for p in data["participants"] if p["name"] == user_name and not p["approved"]), None)

    if participant:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –æ–±—Ä–∞–≤ —ñ–º'—è
        existing_selection = next((p for p in data["participants"] if p["user_id"] == user_id), None)
        if existing_selection:
            await update.message.reply_text(
                f"‚ö†Ô∏è –í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ —ñ–º'—è: {existing_selection['name']}. "
                f"–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ–±—Ä–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–µ —ñ–º'—è {user_name}, –∞–ª–µ –≤–∂–µ –æ–±—Ä–∞–≤ {existing_selection['name']}.")
            return

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        confirmation_text = f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ —ñ–º'—è *{user_name}*. –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∏–±—ñ—Ä?"
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"confirm|{user_name}"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel|{user_name}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(confirmation_text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–±—Ä–∞–≤ —ñ–º'—è {user_name}, –æ—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¶–µ —ñ–º'—è –≤–∂–µ –≤–∏–±—Ä–∞–Ω–æ –∞–±–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ–±—Ä–∞—Ç–∏ —ñ–º'—è {user_name}, —è–∫–µ –≤–∂–µ –≤–∏–±—Ä–∞–Ω–µ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (Inline –∫–Ω–æ–ø–∫–∏)
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data_parts = query.data.split('|')

    if len(data_parts) != 2:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ.")
        logger.error("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ —É callback_query.data")
        return

    action, name = data_parts
    user_id = query.from_user.id
    participant = next((p for p in data["participants"] if p["name"] == name), None)

    if not participant:
        await query.edit_message_text("‚ö†Ô∏è –Ü–º'—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        logger.warning(f"–Ü–º'—è {name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫—É —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
        return

    if action == "confirm":
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –æ–±—Ä–∞–≤ —ñ–º'—è
        existing_selection = next((p for p in data["participants"] if p["user_id"] == user_id), None)
        if existing_selection:
            await query.edit_message_text(
                f"‚ö†Ô∏è –í–∏ –≤–∂–µ –æ–±—Ä–∞–ª–∏ —ñ–º'—è: {existing_selection['name']}."
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –æ–±—Ä–∞–≤ —ñ–º'—è {existing_selection['name']}.")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ–º'—è –≤–∂–µ –æ–±—Ä–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
        if participant["approved"] and participant["user_id"] != user_id:
            await query.edit_message_text(
                f"‚ö†Ô∏è –Ü–º'—è *{name}* –≤–∂–µ –æ–±—Ä–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ —ñ–º'—è.",
                parse_mode='Markdown'
            )
            logger.info(f"–Ü–º'—è {name} –≤–∂–µ –æ–±—Ä–∞–Ω–µ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {participant['user_id']}.")
            return

        # –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        participant["approved"] = True
        participant["user_id"] = user_id
        logger.info(f"–Ü–º'—è {name} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id}.")

        # –í–∏–±—ñ—Ä —É—á–∞—Å–Ω–∏–∫–∞ –¥–ª—è –¥–∞—Ä—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—Ä—É–Ω–∫–∞
        remaining_participants = [
            p for p in data["participants"]
            if p["name"] != name and not p.get("assigned_to")
        ]
        remaining_colors = data["colors"]

        if not remaining_participants or not remaining_colors:
            await query.edit_message_text("üò¢ –ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.")
            logger.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∞–±–æ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è.")
            return

        # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö
        assigned_participant = random.choice(remaining_participants)
        assigned_color = random.choice(remaining_colors)
        logger.info(f"–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∫–æ–ª—ñ—Ä {assigned_color} –¥–ª—è {assigned_participant['name']} –≤—ñ–¥ {name}.")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
        assigned_participant["assigned_to"] = name
        assigned_participant["color"] = assigned_color
        data["colors"].remove(assigned_color)
        logger.info(f"–ö–æ–ª—ñ—Ä {assigned_color} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤.")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        participant["assigned_to"] = assigned_participant["name"]
        participant["color"] = assigned_color

        save_data()
        logger.info(f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ø—ñ—Å–ª—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è {assigned_color} –¥–ª—è {assigned_participant['name']}.")

        await query.edit_message_text(
            f"üéâ –í—ñ—Ç–∞—é, {name}! –í–∏ –±—É–¥–µ—Ç–µ –¥–∞—Ä—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è {assigned_participant['name']} –∑ –∫–æ–ª—å–æ—Ä–æ–º {assigned_color}! üéÅ"
        )
    elif action == "cancel":
        await query.edit_message_text("‚ùå –í–∏–±—ñ—Ä —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –≤–∏–±—ñ—Ä —ñ–º–µ–Ω—ñ {name}.")
    else:
        await query.edit_message_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.")
        logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è: {action}")

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–≤–¥–∞–Ω–Ω—è
async def my_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    participant = next((p for p in data["participants"] if p["user_id"] == user_id), None)

    if participant and participant["assigned_to"] and participant["color"]:
        await update.message.reply_text(
            f"üéâ –í–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è: –¥–∞—Ä—É–≤–∞—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è {participant['assigned_to']} –∑ –∫–æ–ª—å–æ—Ä–æ–º {participant['color']} üéÅ"
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–¥–∞—î —Å–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —ñ–º'—è –∞–±–æ –≤–∞—à–µ –∑–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ.")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, –∞–ª–µ –≤–æ–Ω–æ –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    application = Application.builder().token(TOKEN).build()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("my_task", my_task))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name))
    application.add_handler(CallbackQueryHandler(handle_confirmation, pattern=r"^(confirm|cancel)\|.+$"))

    logger.info("ü§ñ Bot is running...")
    try:
        await application.run_polling()
    except Exception as e:
        logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
